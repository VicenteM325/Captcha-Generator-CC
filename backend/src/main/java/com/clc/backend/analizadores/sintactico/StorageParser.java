
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.clc.backend.analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import com.clc.backend.model.Captcha;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StorageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StorageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public StorageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StorageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StorageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\011\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\006\004\001\002\000\004\012\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\004\010\001\002\000\004\010\011\001\002\000" +
    "\004\006\014\001\002\000\004\011\050\001\002\000\006" +
    "\005\046\011\ufffe\001\002\000\016\013\015\014\020\015" +
    "\022\016\017\017\024\020\016\001\002\000\004\004\044" +
    "\001\002\000\004\004\042\001\002\000\004\004\040\001" +
    "\002\000\004\004\034\001\002\000\006\005\ufffb\007\ufffb" +
    "\001\002\000\004\004\032\001\002\000\006\005\027\007" +
    "\030\001\002\000\004\004\025\001\002\000\004\022\026" +
    "\001\002\000\006\005\ufff6\007\ufff6\001\002\000\016\013" +
    "\015\014\020\015\022\016\017\017\024\020\016\001\002" +
    "\000\006\005\ufffd\011\ufffd\001\002\000\006\005\ufffc\007" +
    "\ufffc\001\002\000\004\022\033\001\002\000\006\005\ufff8" +
    "\007\ufff8\001\002\000\006\023\037\024\035\001\002\000" +
    "\006\005\ufff3\007\ufff3\001\002\000\006\005\ufff9\007\ufff9" +
    "\001\002\000\006\005\ufff4\007\ufff4\001\002\000\004\022" +
    "\041\001\002\000\006\005\ufff7\007\ufff7\001\002\000\004" +
    "\021\043\001\002\000\006\005\ufff5\007\ufff5\001\002\000" +
    "\004\023\045\001\002\000\006\005\ufffa\007\ufffa\001\002" +
    "\000\004\006\014\001\002\000\004\011\uffff\001\002\000" +
    "\004\007\051\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\011\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\022\006\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\046\004\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StorageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StorageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StorageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<Captcha> captchasList = new ArrayList();
    private Captcha tempCaptcha = new Captcha();

    public List<Captcha> getCaptchas() {
        return this.captchasList;
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StorageParser$actions {
  private final StorageParser parser;

  /** Constructor */
  CUP$StorageParser$actions(StorageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action_part00000000(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StorageParser$result;

      /* select the action based on the action number */
      switch (CUP$StorageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= OPEN_BRACE CAPTCHAS COLON OPEN_BRACKET captchas CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-6)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).value;
		RESULT = start_val;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StorageParser$parser.done_parsing();
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // captchas ::= captcha COMMA captchas 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("captchas",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // captchas ::= captcha 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("captchas",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // captcha ::= OPEN_BRACE params CLOSE_BRACE 
            {
              Object RESULT =null;
		
            captchasList.add(tempCaptcha);
            tempCaptcha = new Captcha();
        
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // params ::= params COMMA param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param ::= ID COLON VALUE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setId(v.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param ::= NAME COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setName(v.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param ::= USE COLON ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setUse(e.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param ::= HITS COLON ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setHits(e.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param ::= FAULTS COLON ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setFaults(e.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param ::= LAST_DATE COLON FECHA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		tempCaptcha.setLastDate(f.replaceAll("\"", ""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= LITERAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StorageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
              return CUP$StorageParser$do_action_part00000000(
                               CUP$StorageParser$act_num,
                               CUP$StorageParser$parser,
                               CUP$StorageParser$stack,
                               CUP$StorageParser$top);
    }
}

}
